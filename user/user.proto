syntax = "proto3";

package user;

import "google/protobuf/timestamp.proto";

option go_package = "twitter_remake/protobuf/userpb";

// User represents the user model
message User {
  string id = 1;
  string name = 2;
  string screen_name = 3;
  string email = 4;
  string bio = 5;
  string location = 6;
  string website = 7;
  google.protobuf.Timestamp birth_date = 10;
  string profile_image_url = 8;
  string profile_banner_url = 9;
  int32 followers_count = 11;
  int32 followings_count = 12;
  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
}

// Listing service handles user registration and deletion
service Listing {
  // Register creates a new user
  rpc Register(RegisterRequest) returns (RegisterResponse);

  // DeleteUser deletes an existing user
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
}

message RegisterRequest {
  string name = 1;
  string screen_name = 2;
  string email = 3;
  string profile_image_url = 4;
  google.protobuf.Timestamp birth_date = 5;
}

message RegisterResponse {
  User user = 1;
}

message DeleteUserRequest {
  string access_token = 1;
}

message DeleteUserResponse {
  bool success = 1;
}

// Profile service handles user profile-related operations
service Profile {
  // Get returns the user profile
  rpc Get(GetProfileRequest) returns (User);

  // Get another user's profile by ID
  rpc GetPublicProfile(GetPublicProfileRequest) returns (User);

  // Edit updates the user profile
  rpc Update(UpdateProfileRequest) returns (User);
}

message GetProfileRequest {
  string access_token = 1;
}

message GetPublicProfileRequest {
  // access_token is optional, it is used to check if the user is following the
  // requested user
  string access_token = 1;
  string username = 2;
}

message UpdateProfileRequest {
  string name = 1;
  string bio = 2;
  string location = 3;
  string website = 4;
  string profile_image_url = 5;
  string profile_banner_url = 6;
  google.protobuf.Timestamp birth_date = 7;
}

// Relationship service handles user relationship-related operations
// such as following and unfollowing
service Relationship {
  // Follow adds a new relationship between the user and the target user
  rpc Follow(RelationshipRequest) returns (RelationshipResponse);

  // Unfollow removes the relationship between the user and the target user
  rpc Unfollow(RelationshipRequest) returns (RelationshipResponse);

  // GetFollowers returns a list of users that follow the user using
  // cursor-based pagination (cursor is the last relationship created_at)
  rpc GetFollowers(GetFollowersRequest) returns (GetFollowersResponse);

  // GetFollowings returns a list of users that the user follows using
  // cursor-based pagination (cursor is the last relationship created_at)
  rpc GetFollowings(GetFollowingsRequest) returns (GetFollowingsResponse);
}

// RelationshipRequest is a generic request used by both Follow and Unfollow
message RelationshipRequest {
  string access_token = 1;
  string target_user_id = 2;
}

// RelationshipResponse is a generic response used by both Follow and Unfollow
message RelationshipResponse {
  User user = 1;
}

message GetFollowersRequest {
  string access_token = 1;
  string username = 2;
  int32 limit = 3;
  google.protobuf.Timestamp cursor = 4;
}

message GetFollowersResponse {
  repeated User users = 1;
  google.protobuf.Timestamp next_cursor = 2;
}

message GetFollowingsRequest {
  string access_token = 1;
  string username = 2;
  int32 limit = 3;
  google.protobuf.Timestamp cursor = 4;
}

message GetFollowingsResponse {
  repeated User users = 1;
  google.protobuf.Timestamp next_cursor = 2;
}